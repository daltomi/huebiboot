// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef ui_hpp
#define ui_hpp
#include <FL/Fl.H>
#include <FL/Fl_Shared_Image.H>
#include <FL/Fl_Image.H>
#include <FL/fl_ask.H>
#include <FL/Fl_Native_File_Chooser.H>
#include <FL/filename.H>
/**
 Debe estar ultimo para acceder el header Fl_Image.H
*/
#include "icons/icons.h"
extern "C" { void ShowWindowModal(Fl_Window * window); }
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Browser.H>
extern void OnBrowserEvent(Fl_Browser*, void*);
#include <FL/Fl_Choice.H>
#include <FL/Fl_Button.H>
extern void OnButtonEvent(Fl_Button*, void*);
#include <FL/Fl_Progress.H>

class UIMain : public Fl_Double_Window {
  void _UIMain();
public:
  UIMain(int X, int Y, int W, int H, const char *L = 0);
  UIMain(int W, int H, const char *L = 0);
  UIMain();
  Fl_Box *boxTitle;
  /**
   Tipos de formatos.
  */
  enum FORMATS {FAT, NTFS, EXT3, EXT4}; 
  FORMATS selectFormat; 
  Fl_Group *groupMain;
  Fl_Browser *browserDevices;
  Fl_Choice *choiceFormat;
  static Fl_Menu_Item menu_choiceFormat[];
  Fl_Button *buttonFormat;
  Fl_Button *buttonCancel;
  Fl_Button *buttonToolInfo;
  Fl_Button *buttonToolBackup;
  Fl_Button *buttonToolHelp;
  Fl_Group *groupSplash;
  Fl_Box *boxSplashWait;
  Fl_Button *buttonQuit;
  Fl_Box *boxSplashNotFound;
  Fl_Group *groupBackup;
  Fl_Box *boxBackupTitle;
  Fl_Button *buttonBackupCancel;
  Fl_Box *boxBackupFile;
  Fl_Box *boxBackupBytes;
  Fl_Group *groupFormat;
  Fl_Box *boxFormatTitle;
  Fl_Button *buttonFormatCancel;
  Fl_Box *boxFormatInfo;
  Fl_Progress *formatProgress;
private:
  static void OnChoiceEvent(Fl_Choice *choice, void *data);
};
#include <FL/Fl_Output.H>

class UIInfo : public Fl_Double_Window {
  void _UIInfo();
public:
  UIInfo(int X, int Y, int W, int H, const char *L = 0);
  UIInfo(int W, int H, const char *L = 0);
  UIInfo();
  Fl_Output *outPath;
  Fl_Output *outVendor;
  Fl_Output *outProduct;
  Fl_Output *outIdProduct;
  Fl_Output *outManufacturer;
  Fl_Output *outSerial;
  Fl_Output *outVersion;
  Fl_Output *outPower;
  Fl_Output *outBus;
  Fl_Button *buttonCloseInfo;
  Fl_Button *buttonSaveInfo;
  Fl_Button *buttonNextInfo;
  Fl_Button *buttonPrevInfo;
  Fl_Box *outTitle;
  Fl_Output *outSize;
};

class UIMsg : public Fl_Double_Window {
  void _UIMsg();
public:
  UIMsg(int X, int Y, int W, int H, const char *L = 0);
  UIMsg(int W, int H, const char *L = 0);
  UIMsg();
  enum {NO=0, YES=1}; 
protected:
  Fl_Box *boxMsg;
  Fl_Button *buttonNo;
  Fl_Button *buttonYes;
private:
  char const * title; 
  char const * msg; 
  char const * yes; 
  char const * no; 
public:
  unsigned char reply; 
protected:
  static void OnEvent(Fl_Button * button, void * data);
public:
  void Error(char const * title, char const * msg, char const * yes);
  void Question(char const * title, char const  * msg, char const * yes, char const * no);
  void QuestionWarning(char const * title, char const  * msg, char const * yes, char const * no);
  void Information(char const * title, char const * msg, char const * yes);
protected:
  void SetIcons(Fl_Image * icon, Fl_Image * iyes , Fl_Image * ino = nullptr);
  void SetText();
};
#endif
